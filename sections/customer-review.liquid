<div class="body-review">
  <div class="container">
    <div class="slides">
      {% for block in section.blocks %}
        <div class="slide">
          <div class="polaroid">
            <a>
              {{ block.settings.personImg | image_url: height: 250 | image_tag: class: 'polaroid-img' }}
              {{ block.settings.personName }}
              <p>{{ block.settings.personLoc }}</p>
            </a>
          </div>
          <div class="cust-review">
            <p class="review-p">
              Lorem ipsum dolor sit, amet consectetur adipisicing elit. Iste iure aliquam magni deserunt voluptates nulla odio dolores reprehenderit? Fugiat maxime consequuntur quo quasi animi?
              {{ block.settings.personWords }}
            </p>
          </div>
        </div>
      {%endfor%}

    </div>
    <div class="slide-controls">
      <button id="prev-btn">
        <i class="fas fa-chevron-left"></i>
      </button>
      <button id="next-btn">
        <i class="fas fa-chevron-right"></i>
      </button>
    </div>
  </div>
</div>
<style>
  .body-review {
    width: 100%;
    height: 65vh;
    display: flex;
    align-items: center;
    justify-content: center;
    color: #080808;
  }
  .container {
    position: relative;
    width: 1123px;
    min-width: 350px;
    min-height: 250px;
    /* padding-bottom: 40px; */
    overflow: hidden;
  }
  .slides {
    width: 600%;
    /* 1card = 100%, then 3card = 300% */
    min-height: 100%;
    display: flex;
    justify-content: space-between;
    transition: 1s;
  }
  .slide {
    width: 100%;
    background: #44153F;
    margin: 0 10px;
    display: flex;
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
    border-radius: 20px;
    justify-content: center;
    align-items: center;
    padding: 25px;
  }
  .polaroid a {
    background: #ffffff;
    display: flex;
    padding: 40px 15px 30px;
    text-align: center;
    text-decoration: none;
    z-index: 0;
    box-shadow: 0 10px 20px rgb(0 0 0 / 10%);
    position: relative;
    height: 322px;
    flex-direction: column;
    width: 300px;
    margin: 0 34px;
    justify-content: center;
  }

  .polaroid a:after {
    color: #333;
    font-size: 20px;
    content: attr(title);
    position: relative;
    top: 7px;
  }

  .polaroid-img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .cust-review {
    width: 120%;
    height: auto;
    margin-left: 20px;
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .review-p {
    font-size: 20px;
    line-height: 30px;
    margin-top: 30px;
    color: white;
  }
  .slide-controls {
    position: absolute;
    top: 50%;
    left: 0;
    transform: translateY(-50%);
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  #next-btn,
  #prev-btn {
    cursor: pointer;
    background: transparent;
    font-size: 50px;
    border: none;
    padding: 10px;
    color: grey;
  }

  .slide-content {
    position: absolute;
    top: 50%;
    left: 50px;
    transform: translateY(-50%);
    font-size: 60px;
    color: white;
  }



  @media only screen and (max-width: 650px) {
    .slide {
      flex-direction: column;
    }
    .review-p {
      padding: 0 35px;
      font-size: 17px;
    }
    .polaroid a {
      height: 290px;
      width: 255px;
    }
  }
  @media only screen and (max-width: 450px) {
    .review-p {
      padding: 0 21px;
      font-size: 13px;
    }
    .polaroid a {
      height: 211px;
      width: 206px;
    }
  }
</style>

<script>
  const slideContainer = document.querySelector('.container');
  const slide = document.querySelector('.slides');
  const nextBtn = document.getElementById('next-btn');
  const prevBtn = document.getElementById('prev-btn');
  const interval = 3000;
  let slides = document.querySelectorAll('.slide');
  let index = 1;
  let slideId;

  const firstClone = slides[0].cloneNode(true);
  const lastClone = slides[slides.length - 1].cloneNode(true);

  firstClone.id = 'first-clone';
  lastClone.id = 'last-clone';

  slide.append(firstClone);
  slide.prepend(lastClone);

  const slideWidth = slides[index].clientWidth;

  slide.style.transform = `translateX(${ - slideWidth * index
  }px)`;

  console.log(slides);

  const startSlide = () => {
    slideId = setInterval(() => {
      moveToNextSlide();
    }, interval);
  };

  const getSlides = () => document.querySelectorAll('.slide');

  slide.addEventListener('transitionend', () => {
    slides = getSlides();
    if (slides[index].id === firstClone.id) {
      slide.style.transition = 'none';
      index = 1;
      slide.style.transform = `translateX(${ - slideWidth * index
      }px)`;
    }

    if (slides[index].id === lastClone.id) {
      slide.style.transition = 'none';
      index = slides.length - 2;
      slide.style.transform = `translateX(${ - slideWidth * index
      }px)`;
    }
  });

  const moveToNextSlide = () => {
    slides = getSlides();
    if (index >= slides.length - 1) 
      return;
    



    index++;
    slide.style.transition = '.7s ease-out';
    slide.style.transform = `translateX(${ - slideWidth * index
    }px)`;
  };

  const moveToPreviousSlide = () => {
    if (index <= 0) 
      return;
    



    index--;
    slide.style.transition = '.7s ease-out';
    slide.style.transform = `translateX(${ - slideWidth * index
    }px)`;
  };

  slideContainer.addEventListener('mouseenter', () => {
    clearInterval(slideId);
  });

  slideContainer.addEventListener('mouseleave', startSlide);
  nextBtn.addEventListener('click', moveToNextSlide);
  prevBtn.addEventListener('click', moveToPreviousSlide);

  startSlide();
</script>

{% schema %}
  {
    "name": "Testimonial",
    "settings": [],

    "blocks": [
      {
        "name": "Testimonial ",
        "type": "image",
        "settings": [
          {
            "type": "image_picker",
            "id": "personImg",
            "label": "personImg"
          }, {
            "type": "text",
            "id": "personName",
            "label": "personName"
          }, {
            "type": "text",
            "id": "personLoc",
            "label": "personLoc"
          }, {
            "type": "text",
            "id": "personWords",
            "label": "personWords"
          }
        ]
      }
    ]
  }
{% endschema %}